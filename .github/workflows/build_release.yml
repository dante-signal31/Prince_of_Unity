name: build_release

on:
  workflow_dispatch: {}

jobs:
#  build_windows:
#    name: Build release for windows.
#    runs-on: windows-2019
#    steps:
#      - name: Get source code.
#        uses: actions/checkout@v3
#
#      - name: Cache generated files.
#        uses: actions/cache@v3
#        with:
#          path: Library
#          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
#          restore-keys: |
#            Library-
#
#      - name: Build game for windows.
#        uses: game-ci/unity-builder@v2
#        env:
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#        with:
#          buildName: Prince of Unity
#          targetPlatform: StandaloneWindows64
#          unityVersion: auto
#          versioning: Semantic
#
#      - name: Upload Build
#        uses: actions/upload-artifact@v3
#        with:
#          name: WindowsBuild
#          path: build/StandaloneWindows64
          
  build_linux:
    name: Build release for linux.
    runs-on: ubuntu-latest
    outputs: 
      build_version: ${{ steps.LinuxBuilder.outputs.buildVersion }}
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Cache generated files.
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Build game for linux.
        uses: game-ci/unity-builder@v2
        id: LinuxBuilder
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: Prince of Unity
          targetPlatform: StandaloneLinux64
          unityVersion: auto
          buildsPath: build_linux
          versioning: Semantic

      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: LinuxBuild
          path: build_linux/StandaloneLinux64

#  create_windows_installer:
#    name: Create windows installer.
#    needs: build_windows
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get source code.
#        uses: actions/checkout@v3
#      
#      - name: Download windows build.
#        uses: actions/download-artifact@v3
#        with:
#          name: WindowsBuild
#          path: Build
#      
#      - name: Get folder structure and path.
#        run: |
#          pwd
#          ls -R

  create_linux_installer:
    name: Create linux installer.
    needs: build_linux
    runs-on: ubuntu-latest
    env:
      app: prince-of-unity
      version: ${{ needs.build_linux.outputs.build_version }}
      architecture: amd64
      source_directory: ./
      package_install_root: /usr/share/games/Prince_of_Unity
      output_folder: Installers/Linux
      after_install: Packaging/Linux/postinst.sh
      after_remove: Packaging/Linux/postuninst.sh
      maintainer: dante.signal31@gmail.com
      url: https://github.com/dante-signal31/Prince_of_Unity
      description: Developed with Unity, this game is a hobbyist black box demo remake of Jordan Mechner's classic Prince of Persia (1989).
      license: BSD-3
      category: games
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Download linux build.
        uses: actions/download-artifact@v3
        with:
          name: LinuxBuild
          path: Build

      - name: Remove unused build folder.
        run: rm -rf Build/'Prince of Unity_BackUpThisFolder_ButDontShipItWithYourGame'/

      - name: Change executable and folders permissions.
        run: | 
          chmod 755 Build/'Prince of Unity'
          chmod 755 Build/'Prince of Unity_Data'
          chmod 755 Build/'Prince of Unity_Data'/il2cpp_data
          chmod 755 Build/'Prince of Unity_Data'/il2cpp_data/Metadata
          chmod 755 Build/'Prince of Unity_Data'/il2cpp_data/Resources
          chmod 755 Build/'Prince of Unity_Data'/Resources

      - name: Copy executable icon.
        run: cp Assets/Icons/Running_icon.png Build/Prince_of_Unity_icon.png

      - name: Copy desktop entry.
        run: cp Packaging/Linux/ninja.dlab.Prince_of_Unity.desktop Build/.

      - name: Create DEB package.
        uses: bpicode/github-action-fpm@master
        with:
          fpm_args: ${{ env.source_directory }}
          fpm_opts: '-s dir -t deb -C Build -n ${{ env.app }} -p ${{ env.output_folder }} -v ${{ env.version }} --prefix ${{ env.package_install_root }} --description "${{ env.description }}" --after-install ${{ env.after_install }} --after-remove ${{ env.after_remove }} --maintainer ${{ env.maintainer }} -a ${{ env.architecture }} --url ${{ env.url }} --license ${{ env.license }} --category ${{ env.category }}'

#      - name: Create RPM package.
#        uses: bpicode/github-action-fpm@master
#        with:
#          fpm_args: $source_directory
#          fpm_opts: "-s dir -t rpm -C Build -n $app \
#            -p $output_folder -v $version \
#            --prefix $package_install_root \
#            --description \"$description\" \
#            --after-install $after_install --after-remove $after_remove \
#            --maintainer $maintainer -a $architecture --url $url \
#            --license $license --category $category"

      - name: Upload Linux packages.
        uses: actions/upload-artifact@v3
        with:
          name: LinuxPackages
          path: $output_folder
