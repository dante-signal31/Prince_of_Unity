name: build_release

on:
  workflow_dispatch: {}

jobs:
  build_windows:
    name: Build release for windows.
    runs-on: windows-2019
    outputs:
      project_folder: ${{ steps.ProjectFolderFinder.outputs.projectFolder }}
      build_version: ${{ steps.WindowsBuilder.outputs.buildVersion }}
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Cache generated files.
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Store current folder in an environment path.
        id: ProjectFolderFinder
        shell: pwsh
        run: |
          $base_folder=pwd
          echo "Project folder: $base_folder"
          echo "projectFolder=$base_folder" >> $env:GITHUB_OUTPUT

      - name: Build game for windows.
        uses: game-ci/unity-builder@v2
        id: WindowsBuilder
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: Prince of Unity
          targetPlatform: StandaloneWindows64
          unityVersion: auto
          buildsPath: build_windows
          versioning: Semantic

      - name: Remove unused build folder.
        shell: bash
        run: rm -rf build_windows/StandaloneWindows64/'Prince of Unity_BackUpThisFolder_ButDontShipItWithYourGame'

      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: WindowsBuild
          path: build_windows/StandaloneWindows64


  build_linux:
    name: Build release for linux.
    runs-on: ubuntu-latest
    outputs: 
      build_version: ${{ steps.LinuxBuilder.outputs.buildVersion }}
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Cache generated files.
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Build game for linux.
        uses: game-ci/unity-builder@v2
        id: LinuxBuilder
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: Prince of Unity
          targetPlatform: StandaloneLinux64
          unityVersion: auto
          buildsPath: build_linux
          versioning: Semantic

      - name: Debug who am I.
        run: whoami
        
      - name: Debug what are the folder to be removed permissions.
        run: ls -lR build_linux/StandaloneLinux64/

      - name: Remove unused build folder.
        # Use sudo or you won't be able to remove the folder because it's root owned.
        run: |
          sudo rm -rf build_linux/StandaloneLinux64/'Prince of Unity_BackUpThisFolder_ButDontShipItWithYourGame'/

      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: LinuxBuild
          path: build_linux/StandaloneLinux64


  generate_windows_installer_configuration:
    name: Generate windows installer configuration from template.
    needs: build_windows
    runs-on: ubuntu-latest
    env:
      windows_installer_folder: Installers\Windows
    outputs:
      windows_installer_folder: ${{ env.windows_installer_folder }}
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Show project folder.
        shell: bash
        run: echo ${{ needs.build_windows.outputs.project_folder }}

      - name: Generate an Inno Setup config file.
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: Packaging/Windows/template_windows_iss_script.iss
          output_file: Packaging/Windows/rendered_windows_iss_script.iss
          strict: true
          variables: |
            app_name=Prince of Unity
            app_version=${{ needs.build_windows.outputs.build_version }}
            app_publisher=DLab Ninja
            app_url=https://github.com/dante-signal31/Prince_of_Unity
            app_exe_name=Prince of Unity.exe
            app_installer_name=PoU_setup
            app_icon=Assets\Icons\Running_icon.ico
            app_output_dir=${{ env.windows_installer_folder }}
            project_folder=${{ needs.build_windows.outputs.project_folder }}

      - name: Upload generated configuration.
        uses: actions/upload-artifact@v3
        with:
          name: WindowsInstallerConfiguration
          path: Packaging/Windows/rendered_windows_iss_script.iss


  create_windows_installer:
    name: Create windows installer.
    needs: generate_windows_installer_configuration
    runs-on: windows-2019
    env:
      output_folder: Installers\Windows
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Download windows build.
        uses: actions/download-artifact@v3
        with:
          name: WindowsBuild
          path: Build

      - name: Download generated windows installer configuration.
        uses: actions/download-artifact@v3
        with:
          name: WindowsInstallerConfiguration
          path: Packaging/Windows/

      - name: Get path.
        run: pwd

      - name: Get folder structure.
        # Bash ls -R output is cleaner than Powershell's.
        shell: bash
        run: ls -R


      - name: Run Inno Setup to create Windows installer.
        uses: nadeemjazmawe/inno-setup-action-cli@v6.0.5
        with:
          filepath: Packaging/Windows/rendered_windows_iss_script.iss

      - name: Upload Windows package.
        uses: actions/upload-artifact@v3
        with:
          name: WindowsPackage
          path: ${{ needs.generate_windows_installer_configuration.outputs.windows_installer_folder }}


  create_linux_installers:
    name: Create linux installers packages.
    needs: build_linux
    runs-on: ubuntu-latest
    env:
      app: prince-of-unity
      version: ${{ needs.build_linux.outputs.build_version }}
      architecture: amd64
      source_directory: ./
      package_install_root: /usr/share/games/Prince_of_Unity
      output_folder: Installers/Linux
      after_install: Packaging/Linux/postinst.sh
      after_remove: Packaging/Linux/postuninst.sh
      maintainer: dante.signal31@gmail.com
      url: https://github.com/dante-signal31/Prince_of_Unity
      description: Developed with Unity, this game is a hobbyist black box demo remake of Jordan Mechner's classic Prince of Persia (1989).
      license: BSD-3
      category: games
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Download linux build.
        uses: actions/download-artifact@v3
        with:
          name: LinuxBuild
          path: Build

      - name: Change executable and folders permissions.
        run: | 
          chmod 755 Build/'Prince of Unity'
          chmod 755 Build/'Prince of Unity_Data'
          chmod 755 Build/'Prince of Unity_Data'/il2cpp_data
          chmod 755 Build/'Prince of Unity_Data'/il2cpp_data/Metadata
          chmod 755 Build/'Prince of Unity_Data'/il2cpp_data/Resources
          chmod 755 Build/'Prince of Unity_Data'/Resources

      - name: Copy executable icon.
        run: cp Assets/Icons/Running_icon.png Build/Prince_of_Unity_icon.png

      - name: Copy desktop entry.
        run: cp Packaging/Linux/ninja.dlab.Prince_of_Unity.desktop Build/.

      - name: Create package output folders.
        run: mkdir -p ${{ env.output_folder }}

      - name: Create DEB package.
        uses: bpicode/github-action-fpm@master
        with:
          fpm_args: ${{ env.source_directory }}
          fpm_opts: '-s dir -t deb -C Build -n ${{ env.app }} -p ${{ env.output_folder }} -v ${{ env.version }} --prefix ${{ env.package_install_root }} --description "${{ env.description }}" --after-install ${{ env.after_install }} --after-remove ${{ env.after_remove }} --maintainer ${{ env.maintainer }} -a ${{ env.architecture }} --url ${{ env.url }} --license ${{ env.license }} --category ${{ env.category }}'

      - name: Create DEB package.
        uses: bpicode/github-action-fpm@master
        with:
          fpm_args: ${{ env.source_directory }}
          fpm_opts: '-s dir -t rpm -C Build -n ${{ env.app }} -p ${{ env.output_folder }} -v ${{ env.version }} --prefix ${{ env.package_install_root }} --description "${{ env.description }}" --after-install ${{ env.after_install }} --after-remove ${{ env.after_remove }} --maintainer ${{ env.maintainer }} -a ${{ env.architecture }} --url ${{ env.url }} --license ${{ env.license }} --category ${{ env.category }}'

      - name: Upload Linux packages.
        uses: actions/upload-artifact@v3
        with:
          name: LinuxPackages
          path: ${{ env.output_folder }}

  sign_linux_deb_installer:
    name: Sign linux DEB installer package.
    needs: create_linux_installers
    runs-on: ubuntu-latest
    env:
      packages_folder: Installers
    outputs:
      signed_deb_package: ${{ steps.identify_deb_package.outputs.signed_deb_package }}
    steps:
      - name: Get source code.
        uses: actions/checkout@v3
        
      - name: Download linux build.
        uses: actions/download-artifact@v3
        with:
          name: LinuxPackages
          path: ${{ env.packages_folder }}
      
      - name: Make sure dpkg-sign is installed.
        run: |
          sudo apt update
          sudo apt install dpkg-sig

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Identify DEB package to sign.
        id: identify_deb_package
        run: |
          echo "deb_package=$(ls ./$packages_folder/*.deb)" >> $GITHUB_ENV
          cd $packages_folder
          package=$(ls *.deb)
          echo "signed_deb_package=$package" >> $GITHUB_OUTPUT
          echo "Identified package: $package"
          cd ..
          
      - name: Sign DEB package.
        env:
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
        # Fix to dpkg-sig -f error got from https://note.com/twsnmp/n/n867d351733f8 (translate it from japanese)
        run: |
          echo $passphrase > password
          dpkg-sig -k dante.signal31@gmail.com -g "--no-tty --batch --pinentry-mode loopback --passphrase-file=./password" --sign builder $deb_package
          dpkg-sig --verify $deb_package
          rm password
              
      - name: Upload signed Linux packages.
        uses: actions/upload-artifact@v3
        with:
          name: SignedLinuxDEBPackage
          path: ${{ env.deb_package }}
    
  sign_linux_rpm_installer:
    name: Sign linux RPM installer package.
    needs: create_linux_installers
    runs-on: ubuntu-latest
    env:
      gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      gpg_private_key_file: recovered_priv_key.gpg
      packages_folder: Installers
      signed_packages_folder: SignedLinuxRPMPackage/
    outputs:
      signed_rpm_package: ${{ steps.identify_rpm_package.outputs.signed_rpm_package }}
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Download linux build.
        uses: actions/download-artifact@v3
        with:
          name: LinuxPackages
          path: ${{ env.packages_folder }}
      
      - name: Create private key file.
        run: |
          echo $gpg_private_key | base64 -di > $gpg_private_key_file

      - name: Sign RPM package at LinuxPackages folder.
        uses: dante-signal31/rpmsign@v1.0.3
        with:
          gpg_private_key: ${{ env.gpg_private_key_file }}
          gpg_private_key_password: ${{ secrets.GPG_PASSPHRASE }}
          gpg_name: Prince of Unity (GPG key to sign Prince of Unity packages) <dante.signal31@gmail.com>
          rpm_folder: ${{ env.packages_folder }}
          output_folder: ${{ env.signed_packages_folder }}
      
      - name: Remove private key file.
        run: |
          rm $gpg_private_key_file

      - name: Identify RPM package to sign.
        id: identify_rpm_package
        run: |
          echo "rpm_package=$(ls ./$signed_packages_folder/*.rpm)" >> $GITHUB_ENV
          cd $signed_packages_folder
          package=$(ls *.rpm)
          echo "signed_rpm_package=$package" >> $GITHUB_OUTPUT
          echo "Identified package: $package"
          cd ..

      - name: Upload signed Linux packages.
        uses: actions/upload-artifact@v3
        with:
          name: SignedLinuxRPMPackage
          path: ${{ env.rpm_package }}


  sign_windows_installer:
    name: Sign windows installer package.
    needs: create_windows_installers
    runs-on: windows-2019
    env:
#      base64_pfx_certificate: ${{ secrets.PFX_CERTIFICATE }}
#      base64_pfx_certificate_file: recovered_certificate.pfx
#      pfx_passphrase: ${{ secrets.PFX_PASSPHRASE }}
#      pfx_thumbprint: ${{ secrets.PFX_THUMBPRINT }}
      package_folder: Installer
    outputs:
      signed_windows_package: ${{ steps.identify_windows_package.outputs.signed_windows_package }}
    steps:
      - name: Get source code.
        uses: actions/checkout@v3

      - name: Download windows build.
        uses: actions/download-artifact@v3
        with:
          name: WindowsPackage
          path: ${{ env.package_folder }}

#      - name: Create certificate file.
#        shell: bash
#        run: |
#          echo $base64_pfx_certificate > $base64_pfx_certificate_file
      
      - name: Sign windows installer.
        uses: GabrielAcostaEngler/signtool-code-sign@main
        with:
          # PFX certificate is base64 encoded to be kept as a GitHub secret. This action accepts you to enter
          # that base64 encoded certificate-
          certificate: ${{ secrets.PFX_CERTIFICATE }}
          cert-password: ${{ secrets.PFX_PASSPHRASE }}
          cert-sha1: ${{ secrets.PFX_THUMBPRINT }}
          cert-description: 'Prince of Unity <dante.signal31@gmail.com> More info at: https://github.com/dante-signal31/Prince_of_Unity/'
          folder: ${{ env.package_folder }}
          recursive: true
          timestamp-server: 'http://timestamp.digicert.com'

      - name: Identify windows package.
        id: identify_windows_package
        shell: bash
        run: |
          echo "windows_package=$(ls ./$packages_folder/*.exe)" >> $GITHUB_ENV
          cd $packages_folder
          package=$(ls *.exe)
          echo "signed_windows_package=$package" >> $GITHUB_OUTPUT
          echo "Identified package: $package"
          cd ..
          
      - name: Upload signed Windows package.
        uses: actions/upload-artifact@v3
        with:
          name: SignedWindowsPackage
          path: ${{ env.windows_package }}
    
    
#  deploy_to_packagecloud:
#    name: Upload packages to PackageCloud Repository.
#    needs: create_linux_installers
#    runs-on: ubuntu-latest
#    steps:
#      - name: Retrieve generated packages.
#        uses: actions/download-artifact@v3
#        with:
#          name: LinuxPackages
#          path: package_dist/
#
#      - name: Show on log downloaded packages.
#        shell: bash
#        run: ls package_dist/
#
#      - name: Upload packages to PackageCloud.
#        uses: golift/upload-packagecloud@v1
#        with:
#          userrepo: dante-signal31/prince-of-unity
#          apitoken: ${{ secrets.PACKAGECLOUD_TOKEN }}
#          packages: package_dist/
#          rpmdists: fedora/37
#          debdists: ubuntu/jammy


#  deploy_to_itchio:
#    name: Deploy installers to itch.io.
#    needs: [build_linux, create_linux_installers, create_windows_installer]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download generated Windows installer.
#        uses: actions/download-artifact@v3
#        with:
#          name: WindowsPackage
#          path: Installers/Windows
#        
#      - name: Deploy Windows installer to itch.io
#        uses: manleydev/butler-publish-itchio-action@master
#        env:
#          BUTLER_CREDENTIALS: ${{ secrets.ITCHIO_TOKEN }}
#          CHANNEL: windows
#          ITCH_GAME: prince-of-unity
#          ITCH_USER: dante.signal31
#          PACKAGE: Installers/Windows
#
#      - name: Download generated Linux installers.
#        uses: actions/download-artifact@v3
#        with:
#          name: LinuxPackage
#          path: Installers/Linux
#
#      - name: Deploy Linux installer to itch.io
#        uses: manleydev/butler-publish-itchio-action@master
#        env:
#          BUTLER_CREDENTIALS: ${{ secrets.ITCHIO_TOKEN }}
#          CHANNEL: linux
#          ITCH_GAME: prince-of-unity
#          ITCH_USER: dante.signal31
#          PACKAGE: Installers/Linux
